program sncECEHRDaqSeq
option -c;
%% /* ECEHR BO Record Value is Only One. SO, Record Value Zero Change at Process Completed Sign   */
%% #include <string.h>
%% #include <stdio.h>
%% #include <stdlib.h>
%% #include <epicsThread.h>

int opMode;
int ecehr_status;

int localSave;
int localSaveSt;
int remoteSave;
int remoteSaveSt;
int trigInter;
int trigInterSt;
int trigExter;
int trigExterSt;
int clockInter;
int clockInterSt;
int clockExter;
int clockExterSt;
int adcStart;
int adcStartSt;
int adcStop;
int adcStopSt;
int daqStart;
int daqStartSt;
int daqStop;
int daqStopSt;

int eceCalEnable;
int eceCalStartStop;

int remoteReadyBtn;
int localReadyBtn;
int remoteStoreBtn;
int daqAbortBtn;
int remoteReadyBtnDisa;
int localReadyBtnDisa;
unsigned int ecehrShotNumber;
unsigned int ecehrCalStopShotNumber;

int ccsShotSeqStart;
int ccsCtuStart;
int ccsShotNumber;
double ccsBlipTime;

double ecehrBlipTime;
double setT0;
double setT1;
unsigned int i;

assign opMode to "ECEHR_setOpMode";
assign ecehr_status to "ECEHR_DAQ_STATUS";
%% /* assign ecehr_status to "ECEHR_getState";  */

assign localSave to "ECEHR_LocalSave";
assign remoteSave to "ECEHR_RemoteSave";
assign trigInter to "ECEHR_setTrigInternal";
assign trigExter to "ECEHR_setTrigExternal";
assign clockInter to "ECEHR_setInternal";
assign clockExter to "ECEHR_setExternal";
assign adcStart to "ECEHR_ADCstart";
assign adcStop to "ECEHR_ADCstop";
assign daqStart to "ECEHR_DAQstart";
assign daqStop to "ECEHR_DAQstop";

assign localSaveSt to "ECEHR_LocalSave_STATE";
assign remoteSaveSt to "ECEHR_RemoteSave_STATE";
assign trigInterSt to "ECEHR_setTrigInternal_STATE";
assign trigExterSt to "ECEHR_setTrigExternal_STATE";
assign clockInterSt to "ECEHR_setInternal_STATE";
assign clockExterSt to "ECEHR_setExternal_STATE";
assign adcStartSt to "ECEHR_ADCstart_STATE";
assign adcStopSt to "ECEHR_ADCstop_STATE";
assign daqStartSt to "ECEHR_DAQstart_STATE";
assign daqStopSt to "ECEHR_DAQstop_STATE";

assign remoteReadyBtn to "ECEHR_REMOTE_READY_BTN";
assign localReadyBtn to "ECEHR_LOCAL_READY_BTN";
assign remoteStoreBtn to "ECEHR_REMOTE_STORE_BTN";
assign daqAbortBtn to "ECEHR_DAQ_ABORT_BTN";
assign remoteReadyBtnDisa to "ECEHR_REMOTE_READY_BTN.DISA";
assign localReadyBtnDisa to "ECEHR_LOCAL_READY_BTN.DISA";

assign setT0 to "ECEHR_setT0";
assign setT1 to "ECEHR_setT1";
assign ecehrBlipTime to "ECEHR_blipTime";
assign ecehrShotNumber to "ECEHR_shotNumber";
assign ecehrCalStopShotNumber to "ECEHR_CalStop_shotNumber";

assign ccsShotSeqStart to "CCS_SHOTSEQ_START";
assign ccsCtuStart to "CCS_CTU_shotStart";
assign ccsBlipTime to "CCS_BLIP_TIME";
assign ccsShotNumber to "CCS_SHOT_NUMBER";

assign eceCalEnable to "ECEHR_ECE_CALMODE";
assign eceCalStartStop to "ECEHR_CAL_START_STOP";

monitor eceCalEnable;
monitor eceCalStartStop;
evflag flagCalStartStop;
sync eceCalStartStop flagCalStartStop;

monitor opMode;
monitor ecehr_status;

monitor localSave;
monitor remoteSave;
monitor trigInter;
monitor trigExter;
monitor clockInter;
monitor clockExter;
monitor adcStart;
monitor adcStop;
monitor daqStart;
monitor daqStop;

/* Device Action Status PV */
monitor localSaveSt;
monitor remoteSaveSt;
monitor trigInterSt;
monitor trigExterSt;
monitor clockInterSt;
monitor clockExterSt;
monitor adcStartSt;
monitor adcStopSt;
monitor daqStartSt;
monitor daqStopSt;

monitor remoteReadyBtn;  /* ECEHR OPI Button Action PV */
evflag flagRemoteBtn;
sync remoteReadyBtn flagRemoteBtn;
monitor localReadyBtn;   /* ECEHR OPI Button Action PV */
monitor remoteStoreBtn;  /* ECEHR OPI Button Action PV */
monitor daqAbortBtn;   /* ECEHR OPI Button Action PV */

monitor remoteReadyBtnDisa;  /* ECEHR OPI Button Action PV */
monitor localReadyBtnDisa;   /* ECEHR OPI Button Action PV */

monitor setT0;
monitor setT1;
monitor ecehrBlipTime;
monitor ecehrShotNumber;
monitor ecehrCalStopShotNumber;

monitor ccsShotSeqStart;
monitor ccsCtuStart;
monitor ccsBlipTime;
monitor ccsShotNumber;

evflag seqStartFlag;
sync ccsShotSeqStart seqStartFlag;

evflag abortFlag;
sync daqAbortBtn abortFlag;

evflag ccsTStart;
sync ccsCtuStart ccsTStart;

ss ecehrDaqLocalSeq {
	state init {
		when (TRUE) {
		%% 	epicsThreadSleep(4.5);
			adcStart=1;
			pvPut(adcStart,SYNC);
			daqStart=1;
			pvPut(daqStart,SYNC);
			daqStop=1;
			pvPut(daqStop,SYNC);
			adcStop=1;
			pvPut(adcStop,SYNC);
		} state localSeq
	}
	state localSeq {
        	when (localReadyBtn ==1 && opMode != 1 && daqAbortBtn==0){
			localReadyBtnDisa=1;
			adcStart=1;
			adcStartSt=1;
			pvPut(localReadyBtnDisa,SYNC);
			pvPut(adcStart,SYNC);
			pvPut(adcStartSt,SYNC);
		}state daqstart
		when (remoteStoreBtn == 1 && daqAbortBtn==0){
			remoteSave=1;
			remoteSaveSt=1;
			remoteStoreBtn=0;
			pvPut(remoteSave,SYNC);
			pvPut(remoteSaveSt,SYNC);
			pvPut(remoteStoreBtn,SYNC);
		}state localSeq
		when (daqAbortBtn==1 && opMode != 1){
		}state localSeq 
	} 	
	state daqstart {
		when (delay(setT0) && daqAbortBtn==0) {
			daqStart=1;
			daqStartSt=1;
			pvPut(daqStart,SYNC);
			pvPut(daqStartSt,SYNC);
		}state daqstop
		when (daqAbortBtn==1 && opMode != 1){
		}state localSeq
	}
	state daqstop {
		when (delay(setT1 - setT0) && daqAbortBtn==0) {
			daqStop=1;
			daqStopSt=1;
			pvPut(daqStop,SYNC);
			pvPut(daqStopSt,SYNC);
                }state adcstop
		when (daqAbortBtn==1 && opMode != 1){
		}state localSeq
        }
        state adcstop {
                when (delay(1.5) && daqAbortBtn==0){
			adcStop=1;
			adcStopSt=1;
			pvPut(adcStop,SYNC);
			pvPut(adcStopSt,SYNC);
                }state localsave
		when (daqAbortBtn==1 && opMode != 1){
		}state localSeq
        }
        state localsave {
                when(delay(1.5) && daqAbortBtn==0) {
			localSave=1;
			localSaveSt=1;
			pvPut(localSave,SYNC);
			pvPut(localSaveSt,SYNC);
		}state donelocalsave
		when (daqAbortBtn==1 && opMode != 1){
		}state localSeq
	}
	state donelocalsave {
		when(ecehr_status==1) {
			localReadyBtnDisa=0;
			localReadyBtn=0;
			pvPut(localReadyBtnDisa,SYNC);
			pvPut(localReadyBtn,SYNC);
		}state localSeq 
	}
}
ss ecehrCalMode{
        state init{
                when (TRUE){
                } state ecehr_set_calmode
        }
        state ecehr_set_calmode{
                when(efTestAndClear(flagCalStartStop)){
                        if( eceCalStartStop == 1 && eceCalEnable == 1){
				for(i=ecehrShotNumber; i<=ecehrCalStopShotNumber; i++){
					adcStart=1;
					adcStartSt=1;
					pvPut(adcStart,SYNC);
					pvPut(adcStartSt,SYNC);
					%%  epicsThreadSleep(.1);
					%%  epicsThreadSleep(setT0); 
					daqStart=1;
					daqStartSt=1;
					pvPut(daqStart,SYNC);
					pvPut(daqStartSt,SYNC);
					%%  epicsThreadSleep(setT1 - setT0);
					daqStop=1;
					daqStopSt=1;
					pvPut(daqStop,SYNC);
					pvPut(daqStopSt,SYNC);
                			%%  epicsThreadSleep(.1);
					adcStop=1;
					adcStopSt=1;
					pvPut(adcStop,SYNC);
					pvPut(adcStopSt,SYNC);
                			%%  epicsThreadSleep(.1);
					localSave=1;
					localSaveSt=1;
					pvPut(localSave,SYNC);
					pvPut(localSaveSt,SYNC);
                			%%  epicsThreadSleep(2.);
					if(eceCalStartStop == 0 || eceCalEnable == 0){
					 	 i = ecehrCalStopShotNumber + 1;
					} else {
						ecehrShotNumber = i +1;
						pvPut(ecehrShotNumber,SYNC);
						printf("*ECE Calibration shot i:%d, cur shot: %d, end Shot:%d  \n",i,ecehrShotNumber,ecehrCalStopShotNumber );
					}
				}
                        }
                } state ecehr_set_calmode
        }
}

ss ecehrDaqAbort {
	state daqabort {
		when(efTestAndClear(abortFlag) && daqAbortBtn==1){
			daqStop=1;
                        daqStopSt=1;
                        pvPut(daqStop,SYNC);
                        pvPut(daqStopSt,SYNC);
		%% 	epicsThreadSleep(1.5);
                        adcStop=1;
                        adcStopSt=1;
			daqAbortBtn=0;
			localReadyBtnDisa=0;
			localReadyBtn=0;
                        pvPut(adcStop,SYNC);
                        pvPut(adcStopSt,SYNC);
			pvPut(daqAbortBtn,SYNC);
			pvPut(localReadyBtnDisa,SYNC);
			pvPut(localReadyBtn,SYNC);
                }state daqabort
        }
}
ss ecehrDaqRemoteSeq {
	state init {
		when (TRUE) {
			efClear(ccsTStart);
		} state remoteSeq
	}
	state remoteSeq {
		when (efTestAndClear(seqStartFlag) && ccsShotSeqStart==1 && remoteReadyBtn ==1 && opMode== 1 && daqAbortBtn==0) {
			remoteReadyBtnDisa=1;
			adcStart=1;
                        adcStartSt=1;
			ecehrBlipTime=ccsBlipTime;
			ecehrShotNumber=ccsShotNumber;
			efClear(ccsTStart);
                        pvPut(ecehrBlipTime,SYNC);
                        pvPut(ecehrShotNumber,SYNC);
			pvPut(remoteReadyBtnDisa,SYNC);
                        pvPut(adcStart,SYNC);
                        pvPut(adcStartSt,SYNC);	
		}state daqstartR 
		when (daqAbortBtn==1 && opMode ==1){
		}state remoteSeq 
	} 	
	state daqstartR {
		when (delay(1.0) && daqAbortBtn==0) {
			daqStart=1;
			daqStartSt=1;
			pvPut(daqStart,SYNC);
			pvPut(daqStartSt,SYNC);
		}state daqstartT0R
		when (daqAbortBtn==1 && opMode == 1){
		}state remoteSeq
	}
	state daqstartT0R {
		when (efTestAndClear(ccsTStart) && opMode== 1 && daqAbortBtn==0) {
			printf("***************remote DAQ Start T0 event \n");
		}state daqstopR
		when (daqAbortBtn==1 && opMode == 1){
		}state remoteSeq
	}
	state daqstopR {
		when (delay(setT1 + 2.) && daqAbortBtn==0) {
			printf("****************remote DAQ Start after T1+2 Time\n");
			daqStop=1;
			daqStopSt=1;
			pvPut(daqStop,SYNC);
			pvPut(daqStopSt,SYNC);
		}state adcstopR
		when (daqAbortBtn==1 && opMode == 1){
		}state remoteSeq
	}
	state adcstopR {
		when (delay(1.5) && daqAbortBtn==0){
			adcStop=1;
			adcStopSt=1;
			pvPut(adcStop,SYNC);
			pvPut(adcStopSt,SYNC);
		}state remotesave
		when (daqAbortBtn==1 && opMode == 1){
		}state remoteSeq
	}
	state remotesave {
		when(delay(1.5) && daqAbortBtn==0) {
			remoteSave=1;
			remoteSaveSt=1;
			pvPut(remoteSave,SYNC);
			pvPut(remoteSaveSt,SYNC);
		}state doneremotesave 
		when (daqAbortBtn==1 && opMode == 1){
		}state remoteSeq
	}
	state doneremotesave {
		when(ecehr_status==1) {
			remoteReadyBtnDisa=0;
			pvPut(remoteReadyBtnDisa,SYNC);
		}state remoteSeq 
	}
}
ss ecehrRemoteSetDone {
	state init {
		when (TRUE) {
		} state remoteSetDone
	}
	state remoteSetDone {
		when (efTestAndClear(flagRemoteBtn)) {
			if(remoteReadyBtn ==1 && opMode== 1){
				ecehrBlipTime=ccsBlipTime;
				ecehrShotNumber=ccsShotNumber;
				pvPut(ecehrBlipTime,SYNC);
				pvPut(ecehrShotNumber,SYNC);
			}
		} state remoteSeq
	}
}
