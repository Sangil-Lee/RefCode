program sncCASchedulerSeq
option +r;
option -c;

%{
#include <stdio.h>
#include <sys/types.h>
#include <signal.h>
#include <stdlib.h>
#include <time.h>

#define SCHEDLINE 20

#if 0
static char schedlist[SCHEDLINE][1024];
#endif

static int READSCHEDFILE  = 0;
epicsExportAddress(int, READSCHEDFILE);

static int SCHEDDebug  = 0;
epicsExportAddress(int, SCHEDDebug);

typedef struct{
	int type;
	int schedstate;
	int weektype;
	time_t schedtime;
	char pvname[64];
	char pvvalue[24];
}ScheduleItem;

ScheduleItem scheduleitem[SCHEDLINE];
static int gfileline = 0;
}%

%{
	/*Source define*/
	int MakeScheduleList(const char *filename)
	{
		printf("Filename:%s\n", filename);
		char *strline = NULL;
		size_t len = 0;
		ssize_t read;

		FILE *fp = fopen(filename, "r");
		if(fp == NULL) {
			printf("%s Schedule file is not existed\n", filename);
			pclose(fp);
			return -1;
		};

		gfileline = 0;
#if 1
		char *pch = NULL;
		time_t curTime = time(NULL);
		struct tm *curTM = localtime(&curTime);
		while((read=getline(&strline, &len, fp))!=-1) 
		{
			if(strline[0]=='#') continue;
			if(gfileline == 20 ) break;
			pch = strtok(strline,":");
			if(strcasecmp(pch,"Datetime") == 0)
			{
				/*Datetime*/
				scheduleitem[gfileline].type = 0;
				pch = strtok (NULL, ":");
				struct tm stTM;
				time_t schedTime=0;
				strptime(pch, "%Y/%m/%d %H-%M-%S", &stTM);
				schedTime = mktime(&stTM);
				scheduleitem[gfileline].schedtime = schedTime;

				pch = strtok (NULL, ":");
				strcpy(scheduleitem[gfileline].pvname, pch);

				pch = strtok (NULL, ":");
				if(pch[strlen(pch)-1] =='\n')
					pch[strlen(pch)-1] ='\0';

				strcpy(scheduleitem[gfileline].pvvalue, pch);
			}
			else if(strcasecmp(pch,"Day") == 0)
			{
				/*Day*/
				scheduleitem[gfileline].type = 1;
				pch = strtok (NULL, " ");

				int type = 0;
				char sday[strlen(pch)];
				strcpy(sday, pch);

				if(strcmp(sday,"Everyday")==0)			type = 0;
				else if(strcmp(sday,"Monday")==0)		type = 1;
				else if(strcmp(sday,"Tuesday")==0)		type = 2;
				else if(strcmp(sday,"Wednesday")==0)	type = 3;
				else if(strcmp(sday,"Thursday")==0)		type = 4;
				else if(strcmp(sday,"Friday")==0)		type = 5;
				else if(strcmp(sday,"Saturday")==0)		type = 6;
				else if(strcmp(sday,"Sunday")==0)		type = 7;

				int weektype = curTM->tm_wday;

				if(type==0) weektype=0;

				scheduleitem[gfileline].weektype = type;

				/*Time*/
				pch = strtok (NULL, ":");

				struct tm stTM;
				strptime(pch, "%H-%M-%S", &stTM);

				int setTime = (stTM.tm_hour*3600)+(stTM.tm_min*60)+stTM.tm_sec;       
				/*int curDayTime = (curTM->tm_hour*3600)+(curTM->tm_min*60)+(curTM->tm_sec);*/
				scheduleitem[gfileline].schedtime = setTime;

				pch = strtok (NULL, ":");
				strcpy(scheduleitem[gfileline].pvname, pch);

				pch = strtok (NULL, ":");
				if(pch[strlen(pch)-1] =='\n')
					pch[strlen(pch)-1] ='\0';

				strcpy(scheduleitem[gfileline].pvvalue, pch);
			}
			else if(strcasecmp(pch,"Every secs") == 0)
			{
				scheduleitem[gfileline].type = 2;
				pch = strtok (NULL, ":");

				/*int dailysec = (curTM->tm_hour*3600)+(curTM->tm_min*60)+(curTM->tm_sec);*/
				long secs = strtol(pch, NULL, 10);
				scheduleitem[gfileline].schedtime = secs;

				pch = strtok (NULL, ":");
				strcpy(scheduleitem[gfileline].pvname, pch);

				pch = strtok (NULL, ":");
				if(pch[strlen(pch)-1] =='\n')
					pch[strlen(pch)-1] ='\0';

				strcpy(scheduleitem[gfileline].pvvalue, pch);
			}
			else
			{
				pch = strtok (NULL, ":");
			};
			gfileline++;
		};
#else
		while((read=getline(&strline, &len, fp))!=-1) 
		{
			if(strline[0]=='#') continue;
			strcpy(schedlist[gfileline],strline);
			gfileline++;
		};
#endif
		if(strline)	free(strline);
		if(fp) pclose(fp);
		return 0;
	};

	int GetStrPos(const char *strpvname)
	{
		int pos = 0;
		while(strpvname[pos++]!='_')
		{
			;
		}
		return pos;
	};
	int GetCurrentTime(time_t *curRTime, int *curWeektype, int *curTodaySec)
	{
		time_t curtime = time(NULL);
		*curRTime = curtime;
		struct tm *curTM = localtime(&curtime);
		*curWeektype = curTM->tm_wday;
		*curTodaySec = (curTM->tm_hour*3600)+(curTM->tm_min*60)+(curTM->tm_sec);
		return 0;
	};
#if 0
	int RunSchedule()
	{
		int j = 0;
		for( j = 0 ;j<gfileline;j++)
		{
			printf("Type(%d),SchedState(%d),WeekType(%d), SchedTime(%lu), PVName(%s), PVValue(%s)\n",scheduleitem[j].type,scheduleitem[j].schedstate, scheduleitem[j].weektype,scheduleitem[j].schedtime,scheduleitem[j].pvname,scheduleitem[j].pvvalue);
		}
		return 0;
		char *pch = NULL;
		time_t curTime = time(NULL);
		struct tm *curTM = localtime(&curTime);

		int i = 0;
		for(i = 0; i < SCHEDLINE; i++)
		{
			char strBuff[strlen(schedlist[i])];
			strcpy(strBuff, schedlist[i]);
			pch = strtok(strBuff,":");
			if(strcasecmp(pch,"Datetime") == 0)
			{
				pch = strtok (NULL, ":");
				struct tm stTM;
				time_t schedTime=0;
				strptime(pch, "%Y/%m/%d %H-%M-%S", &stTM);
				schedTime = mktime(&stTM);
				if(curTime == schedTime)
				{
					pch = strtok (NULL, ":");
					/*string pvname = pch;*/
					char pvname[strlen(pch)];
					strcpy(pvname, pch);

					pch = strtok (NULL, ":");
					if(pch[strlen(pch)-1] =='\n')
						pch[strlen(pch)-1] ='\0';

					/*string pvvalue = pch;*/
					char pvvalue[strlen(pch)];
					strcpy(pvvalue, pch);

					if(strncmp(pvname, "RCOMMANDER", 10) != 0)
					{
						/*
						printf("caPut:%s(%s)\n", pvname, pvvalue);
						caPutString(pvname, pvvalue);
						*/
					}
					else
					{
						double dvalue = strtod(pvvalue, NULL);
						/*caPut(pvname, dvalue, DBR_DOUBLE);*/
					};
				}
				else
				{
					pch = strtok(NULL, ":");
				}
			}
			else if(strcasecmp(pch,"Day") == 0)
			{
				/*Day*/
				pch = strtok (NULL, " ");
				int type = 0;

				char sday[strlen(pch)];
				strcpy(sday, pch);

				if(strcmp(sday,"Everyday")==0)			type = 0;
				else if(strcmp(sday,"Monday")==0)		type = 1;
				else if(strcmp(sday,"Tuesday")==0)		type = 2;
				else if(strcmp(sday,"Wednesday")==0)	type = 3;
				else if(strcmp(sday,"Thursday")==0)		type = 4;
				else if(strcmp(sday,"Friday")==0)		type = 5;
				else if(strcmp(sday,"Saturday")==0)		type = 6;
				else if(strcmp(sday,"Sunday")==0)		type = 7;

				int weektype = curTM->tm_wday;

				if(type==0) weektype=0;

				/*Time*/
				pch = strtok (NULL, ":");

				struct tm stTM;
				strptime(pch, "%H-%M-%S", &stTM);

				int setTime = (stTM.tm_hour*3600)+(stTM.tm_min*60)+stTM.tm_sec;       
				int curDayTime = (curTM->tm_hour*3600)+(curTM->tm_min*60)+(curTM->tm_sec);

				/*printf("CuDayTime:%d, SetDayTime:%d\n", curDayTime, setTime);*/

				if((type == weektype) && (setTime==curDayTime)) 
				{
					pch = strtok (NULL, ":");
					/*string pvname = pch;*/
					char pvname[strlen(pch)];
					strcpy(pvname, pch);

					pch = strtok (NULL, ":");

					if(pch[strlen(pch)-1] =='\n')
						pch[strlen(pch)-1] ='\0';

					char pvvalue[strlen(pch)];
					strcpy(pvvalue, pch);

					if(strncmp(pvname, "RCOMMANDER", 10) != 0)
					{
						/*
						printf("caPut:%s(%s)\n", pvname, pvvalue);
						caPutString(pvname, pvvalue);
						*/
					}
					else
					{
						double dvalue = strtod(pvvalue, NULL);
					};
				}
				else
				{
					pch=strtok(NULL,":");
				};
			}
			else if(strcasecmp(pch,"Every secs") == 0)
			{
				pch = strtok (NULL, ":");
				int dailysec = (curTM->tm_hour*3600)+(curTM->tm_min*60)+(curTM->tm_sec);
				long secs = strtol(pch, NULL, 10);

				printf("dailysec:%d, setsecs:%ld\n", dailysec, secs);

				if((dailysec % secs) == 0 ) 
				{
					pch = strtok (NULL, ":");

					char pvname[strlen(pch)];
					strcpy(pvname, pch);

					pch = strtok (NULL, ":");
					if(pch[strlen(pch)-1] =='\n')
						pch[strlen(pch)-1] ='\0';

					char pvvalue[strlen(pch)];
					strcpy(pvvalue, pch);

					if(strncmp(pvname, "RCOMMANDER", 10) != 0)
					{
						printf("caPut:%s(%s)\n", pvname, pvvalue);
					}
					else
					{
						double dvalue = strtod(pvvalue, NULL);
					};
				}
				else
				{
					pch = strtok (NULL, ":");
				};
			}
			else
			{
				pch = strtok (NULL, ":");
			};
		};
		return 0;
	}
#endif
}%

string  strPVRCommander[20];
assign  strPVRCommander to {"","","","","","","","","","","","","","","","","","","",""};
double	d_pvValue[20];
assign  d_pvValue to {"","","","","","","","","","","","","","","","","","","",""};

ss CAScheduler
{
	state init
	{
		when(TRUE)
		{
			%% MakeScheduleList("./CAScheduler.sch");
			%% int i = 0;
			for(i=0;i<gfileline;i++)
			{
				%%int pos = GetStrPos(scheduleitem[i].pvname);
				if(strncmp(scheduleitem[i].pvname+pos, "RCOMMANDER", 10) == 0)
				{
					/*pvAssign(strPVRCommander[i], "EXMDSPLUS_RCOMMANDER");*/
					pvAssign(strPVRCommander[i], scheduleitem[i].pvname);
					pvMonitor(strPVRCommander[i]);
				}
				else
				{
					pvAssign(d_pvValue[i], scheduleitem[i].pvname);
					pvMonitor(d_pvValue[i]);
				};
			};
		} state Scheduling
	}
	state Scheduling
	{
		/*when(delay(.5))*/
		when(delay(1.))
		{
			/*RunSchedule();*/
			%%time_t curtime; int curweektype, curtodaysec;
			GetCurrentTime(&curtime, &curweektype, &curtodaysec);
			%%int i = 0;
			for( i = 0 ;i<gfileline;i++)
			{
				/*printf("CurTime(%lu),CurWeekType(%d),CurSec(%d)\n",curtime,curweektype,curtodaysec);*/
				/*printf("Type(%d),SchedState(%d),WeekType(%d), SchedTime(%lu), PVName(%s), PVValue(%s)\n",scheduleitem[i].type,scheduleitem[i].schedstate, scheduleitem[i].weektype,scheduleitem[i].schedtime,scheduleitem[i].pvname,scheduleitem[i].pvvalue);*/
				if(scheduleitem[i].type == 0)
				{
					if(curtime==scheduleitem[i].schedtime)
					{
						%%int pos = GetStrPos(scheduleitem[i].pvname);
						if(strncmp(scheduleitem[i].pvname+pos, "RCOMMANDER", 10) == 0)
						{
							strcpy(strPVRCommander[i], scheduleitem[i].pvvalue);
							pvPut(strPVRCommander[i]);
						}
						else
						{
							d_pvValue[i]=strtod(scheduleitem[i].pvvalue,NULL);
							pvPut(d_pvValue[i]);
						};
					};
				}
				else if(scheduleitem[i].type == 1)
				{ 
					/*if(curtodaysec==scheduleitem[i].schedtime && curweektype==scheduleitem[i].weektype)*/
					if(curtodaysec==scheduleitem[i].schedtime )
					{
						if(curweektype==scheduleitem[i].weektype || scheduleitem[i].weektype==0)
						{
							%%int pos = GetStrPos(scheduleitem[i].pvname);
							if(strncmp(scheduleitem[i].pvname+pos, "RCOMMANDER", 10) == 0)
							{
								strcpy(strPVRCommander[i], scheduleitem[i].pvvalue);
								pvPut(strPVRCommander[i]);
							}
							else
							{
								d_pvValue[i]=strtod(scheduleitem[i].pvvalue,NULL);
								pvPut(d_pvValue[i]);
							};
						};
					};
				}
				else if(scheduleitem[i].type == 2)
				{
					if((curtodaysec%scheduleitem[i].schedtime) == 0)
					{
						%%int pos = GetStrPos(scheduleitem[i].pvname);
						if(strncmp(scheduleitem[i].pvname+pos, "RCOMMANDER", 10) == 0)
						{
							strcpy(strPVRCommander[i], scheduleitem[i].pvvalue);
							pvPut(strPVRCommander[i]);
							/*printf("PVName:%s, PVValue:%s\n",scheduleitem[i].pvname, scheduleitem[i].pvvalue);*/
						}
						else
						{
							d_pvValue[i]=strtod(scheduleitem[i].pvvalue,NULL);
							pvPut(d_pvValue[i]);
						};
					};
				};
			}
		} state Scheduling
	}
}

