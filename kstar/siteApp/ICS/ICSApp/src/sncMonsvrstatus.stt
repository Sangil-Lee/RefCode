program sncMonsvrstatus

option +r;
option -c;

%{
#include	<stdio.h>
#include	<limits.h>

#define		CAGATEWAY_SERVER_FAULT		1
#define		CHANNEL_SERVER_FAULT		2
#define		DATA_SERVER_FAULT			4
#define		BACKUP_SERVER_FAULT			8
#define		WEB_SERVER_FAULT			16
#define		MCR_TEMP_WARNING			32
#define		COMP_TEMP_WARNING			64
#define		MDSPLUS_SERVER_FAULT		128
#define		CAGATEWAY2_SERVER_FAULT		256

	void print_binary ( unsigned int u )
	{
		unsigned int c = ~0u - ( ~0u >> 1 );

		while ( c != 0 )
		{
			if ( ( u & c ) != 0 ) printf ("1");
			else printf ("0");
			c = c >> 1;
		};
		printf ("\n");
	};

	int bitCheck(unsigned int src, unsigned int org )
	{
		return (src&org)==0?0:1;
	}
}%

float       mcr_temp;
assign      mcr_temp    to  "ICS_TMON_OPI_RACK1";
monitor     mcr_temp;

float       comp_temp[6];
float       comp_temp_before[6];
assign      comp_temp   to  {
	"ICS_TMON_SERVER_RACK1", "ICS_TMON_SERVER_RACK2", 
	"ICS_TMON_MAIN_STORAGE", "ICS_TMON_COMP_ROOM", 
	"ICS_TMON_KSTAR_BACKBONE", "ICS_TMON_NFRI_BACKBONE"
	};
monitor     comp_temp;

int         server_status;
assign      server_status   to "CCS_EIP_INTL_SERVER";
%%/*assign		server_status	to "ICS_SVRCHECK";*/

evflag      ef_mcr_temp;
evflag      ef_comp_temp;

sync        mcr_temp    ef_mcr_temp;
sync        comp_temp   ef_comp_temp;


int			server_fault;
int			old_server_fault;
assign		server_fault	to	"ICS_PINGCHECK";
monitor		server_fault;

evflag		ef_svr_fault;
sync		server_fault	ef_svr_fault;

ss Mcr_Temp
{
	state init
	{
		when(TRUE)
		{
			efClear(ef_mcr_temp);
		}state normal
	}
	state normal
	{
		when(efTestAndClear(ef_mcr_temp) && mcr_temp >= 30.0)
		{
			pvGet(server_status);
			server_status |=  MCR_TEMP_WARNING;
			print_binary(server_status);
			pvPut(server_status);
		}state warning
	}
	state warning
	{
		when(efTestAndClear(ef_mcr_temp) && mcr_temp < 29.5)
		{
			pvGet(server_status);
			server_status &= ~MCR_TEMP_WARNING;
			print_binary(server_status);
			pvPut(server_status);
		}state normal
	}
}

ss Comp_Temp
{
	state init
	{
		when(TRUE)
		{
			efClear(ef_comp_temp);
		}state normal
	}
	state normal
	{
		when(efTestAndClear(ef_comp_temp) && (comp_temp[0] >= 31.0 || comp_temp[1] >= 31.0 ||
								 comp_temp[2] >= 31.0 || comp_temp[3] >= 31.0 ||
								 comp_temp[4] >= 31.0 || comp_temp[5] >= 31.0))
		{
			comp_temp_before[0] = comp_temp[0]; comp_temp_before[1] = comp_temp[1];
			comp_temp_before[2] = comp_temp[2]; comp_temp_before[3] = comp_temp[3];
			comp_temp_before[4] = comp_temp[4]; comp_temp_before[5] = comp_temp[5];
			%{if(abs(pVar->comp_temp[0] - pVar->comp_temp_before[0]) < 30 ||
			     abs(pVar->comp_temp[1] - pVar->comp_temp_before[1]) < 30 ||
			     abs(pVar->comp_temp[2] - pVar->comp_temp_before[2]) < 30 ||
			     abs(pVar->comp_temp[3] - pVar->comp_temp_before[3]) < 30 ||
			     abs(pVar->comp_temp[4] - pVar->comp_temp_before[4]) < 30 ||
			     abs(pVar->comp_temp[5] - pVar->comp_temp_before[5]) < 30 )
			}%
			%%{
			pvGet(server_status);
			server_status |=  COMP_TEMP_WARNING;
			print_binary(server_status);
			pvPut(server_status);
			%%}
		}state warning
	}
	state warning
	{
		when(efTestAndClear(ef_comp_temp) && ( comp_temp[0] < 30.0 && comp_temp[1] < 30.0 &&
									 comp_temp[2] < 30.0 && comp_temp[3] < 30.0 &&
									 comp_temp[4] < 30.0 && comp_temp[5] < 30.0))
		{
			comp_temp_before[0] = comp_temp[0]; comp_temp_before[1] = comp_temp[1];
			comp_temp_before[2] = comp_temp[2]; comp_temp_before[3] = comp_temp[3];
			comp_temp_before[4] = comp_temp[4]; comp_temp_before[5] = comp_temp[5];
			pvGet(server_status);
			server_status &= ~COMP_TEMP_WARNING;
			print_binary(server_status);
			pvPut(server_status);
		}state normal
	}
}

ss SVR_Fault
{
	state init
	{
		when(TRUE)
		{
			efClear(ef_svr_fault);
		}state checkSvr
	}
	state checkSvr
	{
		when(efTestAndClear(ef_svr_fault) && old_server_fault != server_fault)
		{
			pvGet(server_status);
			pvGet(server_fault);
			old_server_fault = server_fault;
			%{
			if(bitCheck(pVar->server_fault, CAGATEWAY2_SERVER_FAULT) == 0)
			  pVar->server_status &= ~CAGATEWAY2_SERVER_FAULT;
			else if(bitCheck(pVar->server_fault, CAGATEWAY2_SERVER_FAULT) == 1)
				pVar->server_status |= CAGATEWAY2_SERVER_FAULT;
			if(bitCheck(pVar->server_fault, CAGATEWAY_SERVER_FAULT) == 0)
			  pVar->server_status &= ~CAGATEWAY_SERVER_FAULT;
			else if(bitCheck(pVar->server_fault, CAGATEWAY_SERVER_FAULT) == 1)
			  pVar->server_status |= CAGATEWAY_SERVER_FAULT;

			if(bitCheck(pVar->server_fault, CHANNEL_SERVER_FAULT) == 0 && bitCheck(pVar->server_fault, MDSPLUS_SERVER_FAULT) == 0)
			  pVar->server_status &= ~CHANNEL_SERVER_FAULT;
			else if(bitCheck(pVar->server_fault, CHANNEL_SERVER_FAULT) == 1 || bitCheck(pVar->server_fault, MDSPLUS_SERVER_FAULT) == 1)
			  pVar->server_status |= CHANNEL_SERVER_FAULT;

			if(bitCheck(pVar->server_fault, DATA_SERVER_FAULT) == 0)
			  pVar->server_status &= ~DATA_SERVER_FAULT;
			else if(bitCheck(pVar->server_fault, DATA_SERVER_FAULT) == 1)
			  pVar->server_status |= DATA_SERVER_FAULT;
			if(bitCheck(pVar->server_fault, BACKUP_SERVER_FAULT) == 0)
			  pVar->server_status &= ~BACKUP_SERVER_FAULT;
			else if(bitCheck(pVar->server_fault, BACKUP_SERVER_FAULT) == 1)
			  pVar->server_status |= BACKUP_SERVER_FAULT;
			/*
			if(bitCheck(pVar->server_fault, WEB_SERVER_FAULT) == 0)
			  pVar->server_status &= ~WEB_SERVER_FAULT;
			else if(bitCheck(pVar->server_fault, WEB_SERVER_FAULT) == 1)
			  pVar->server_status |= WEB_SERVER_FAULT;
			if(bitCheck(pVar->server_fault, MDSPLUS_SERVER_FAULT) == 0)
			  pVar->server_status &= ~CHANNEL_SERVER_FAULT;
			else if(bitCheck(pVar->server_fault, MDSPLUS_SERVER_FAULT) == 1)
			  pVar->server_status |= CHANNEL_SERVER_FAULT;
			*/
			}%
			%%/*print_binary (server_status);*/
			pvPut(server_status);
		}state checkSvr
	}
}
