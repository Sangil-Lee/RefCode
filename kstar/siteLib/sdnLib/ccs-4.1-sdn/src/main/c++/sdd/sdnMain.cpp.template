/* sdnMain.cpp file */
/* This file will be named as <CBS1>-<CBS2>-<CBS3>-VAR-PCF<index>CORE.cpp  when generated by SDD  */
/* It shall be part of Maven ?*/

#include <iostream>
#include <stdlib.h>
#include <unistd.h>
#include <getopt.h>
#include <math.h>
#include <string.h>

#include <sdn/sdnapi.h>

/* includetopics.h -- create by SDD. includes topic header files for the topics the application is publish/subscriber to */
#include "includetopics.h"

/* topicvars.h -- create by SDD. contains the application topic variable definitions  */
#include "topicvars.h"


using namespace std; 

// -- configure_sdn.cpp is generated by SDD and contains the code for configureSDN and cleanupSDN function call 
extern int configureSDN(); 
extern int cleanupSDN(); 

int main(int argc, char **argv)
{
    SR_RET sr_ret;
    string defaultfile = "defaultAppl.ini"; 
    string userfile = "userSpecifiedAppl.ini"; 

    /* Initialize SDN */

    sr_ret = initializeSDN((char *)defaultfile.c_str(), (char *)userfile.c_str());

    if(sr_ret != SR_OK)
    {
        printf("initializeSDN(\"defaultAppl.ini\", \"userSpecifiedAppl.ini\") failed.\n");
        return (1);
    }

    /* configure SDN application */

    configureSDN(); 

    /* Wait for SDN ready status */
    while(1)
    {
        if(isSDNStatusReady())
            break;

        sleep(1);
    }


    // -- User shall edit here to insert code for publishing data and receiving data -- 

    /* API to publish on a topic */
    /* replacing xxx with the approriate topic-name */

    // publisher_xxx.publish(p_userdata_xxx) 


    /* API to receive data on a topic - blocking mode  */ 
    /* replacing yyy with the approriate topic-name */

    // subscriber_yyy.receive(s_userdata_yyy) 

    /* API to receive data on a topic - non-blocking mode  */


    /* unregister publishers and subscribers */
    cleanupSDN(); 

    /* release SDN resources */
    terminateSDN();
}
